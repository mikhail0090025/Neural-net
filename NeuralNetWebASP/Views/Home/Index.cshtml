@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1>Neural net manager</h1>
    <div class="new-NN">
        <form action="api/neuralnets/newgeneration" method="post" id="CreateNNform">
            <div class="form_half">
                <p>Inputs count: </p> <input type="number" name="inputs_count" value="4" /><br />
                <p>Outputs count: </p> <input type="number" name="outputs_count" value="2" /><br />
                <p>Hidden layers count: </p> <input type="number" name="hidden_layers_count" value="4" /><br />
                <p>Neurals in hidden layer count: </p> <input type="number" name="neurals_in_hidden_layer_count" value="5" /><br />
                <p>Generation size: </p> <input type="number" name="gen_size" value="50" /><br />
            </div>
            <div class="form_half">
                <p>Learning factor: </p> <input type="number" name="learning_factor" value="100" /><br />
                <p>Inputs round: </p>
                <select name="inp_round">
                    <option value="DontRound">Don't round</option>
                    <option value="Tanh" selected>Tanh</option>
                    <option value="ZeroAndOne">Convert to Zero/One (Opened/Closed)</option>
                </select>
                <p>Neurals round: </p>
                <select name="neu_round">
                    <option value="DontRound">Don't round</option>
                    <option value="Tanh">Tanh</option>
                    <option value="ZeroAndOne" selected>Convert to Zero/One (Opened/Closed)</option>
                </select>
                <p>Outputs round: </p>
                <select name="out_round">
                    <option value="DontRound" selected>Don't round</option>
                    <option value="Tanh">Tanh</option>
                    <option value="ZeroAndOne">Convert to Zero/One (Opened/Closed)</option>
                </select>
            </div>
            <input type="submit" />
            <br />
        </form>
    </div>
@*     <button id="addElementButton" onclick="fetch(`api/neuralnets/getaddingtodbview`, {method: 'GET'}).then(response=>
        response.text()).then(data => {document.getElementById('AddElementToDatabase').innerHTML = data;}).catch(error => {alert(error)})">Add new element to database
    </button>
 *@  
    <button id="addElementButton" onclick="ShowViewNewElementToDB()">Add new element to database</button>
    <button onclick="GetGenerationJSON()">Get generation in JSON</button>
    <button onclick="GetDataInJSON()">Get data about generation (JSON)</button>
    <div id="AddElementToDatabase"></div>
</div>
<style>
    .form_half {
        width: 45%;
        display: inline-block;
        border: 2px solid black;
        margin: 20px;
        padding: 20px;
        height: 100%;
        vertical-align: top;
        background: #FEFE99;
        font-family: Consolas;
        font-size: 20px;
    }
</style>
<script type="text/javascript">
    function GetGenerationJSON() {
        fetch(`api/neuralnets/generationinjson`)
            .then(response => response.text())
            .then(data => { alert(data); })
            .catch(error => { alert(`Error: ${error}`) });
    }
    /*document.getElementById("CreateNNform").addEventListener("submit", function (event) {
        event.preventDefault();
    });*/
    // Shows window with fields that user uses to adding new examples to learning database of neural net
    function ShowViewNewElementToDB() {
        fetch(`api/neuralnets/getaddingtodbview`)
            .then(response => response.text())
            .then(data => {
                document.getElementById("AddElementToDatabase").innerHTML = data;
                SetFormAddToDB();
            })
            .catch(error => {
                document.getElementById("AddElementToDatabase").innerHTML = `<p style='color: red;'>Error: ${error}</p>`;
                alert("Error: " + error);
            });
    }
    function GetDataInJSON() {
        fetch(`api/neuralnets/getdata`)
            .then(response => response.text())
            .then(data => { console.log(data); alert(data); })
            .catch(error => { alert(error); })
    }
    // Adds event listener to form, when it shows to user
    function SetFormAddToDB() {
        document.getElementById('myForm').addEventListener('submit', function (event) {
            event.preventDefault();
            console.log("Form submitted");
            var inputs = [];
            var outputs = [];
            var num = 0;
            while (document.getElementById(`input_${num}`) != undefined) {
                var value = document.getElementById(`input_${num}`).value;
                inputs.push(value);
                num++;
            }
            console.log(`input_${num} is null`);
            num = 0;
            while (document.getElementById(`output_${num}`) != undefined) {
                var value = document.getElementById(`output_${num}`).value;
                outputs.push(value);
                num++;
            }
            console.log(`output_${num} is null`);
            console.log("Inputs: ", inputs);
            console.log("Outputs: ", outputs);
            //alert("Inputs: " + inputs.join(", ") + "\nOutputs: " + outputs.join(", "));
            // sending request
            fetch(`api/neuralnets/addtodb`, {
                method: 'POST',
                headers: { 'Content-type': 'application/json' },
                body: JSON.stringify({ LearningInputs: inputs, ExpectedOutputs: outputs })
            })
                .then(response => response.json())
                .then(data => {
                    document.getElementById("AddingToDBresult").innerHTML = data;
                    alert(data);
                })
                .catch(error => { alert(error); });
        });
    }
</script>
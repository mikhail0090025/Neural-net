@{
    ViewData["Title"] = "Home Page";
}
<link href="~/css/myStylesheet.css" rel="stylesheet"/>
<!-- <div class="text-center"> -->
    <div>
    <h1>Neural net manager</h1>
    <div class="new-NN">
        <form action="api/neuralnets/newgeneration" method="post" id="CreateNNform">
            <div class="form_half">
                <p>Inputs count: </p> <input type="number" name="inputs_count" value="4" /><br />
                <p>Outputs count: </p> <input type="number" name="outputs_count" value="2" /><br />
                <p>Hidden layers count: </p> <input type="number" name="hidden_layers_count" value="4" /><br />
                <p>Neurals in hidden layer count: </p> <input type="number" name="neurals_in_hidden_layer_count" value="5" /><br />
                <p>Generation size: </p> <input type="number" name="gen_size" value="50" /><br />
            </div>
            <div class="form_half">
                <p>Learning factor: </p> <input type="number" name="learning_factor" value="100" /><br />
                <p>Inputs round: </p>
                <select name="inp_round">
                    <option value="DontRound" selected>Don't round</option>
                    <option value="Tanh">Tanh</option>
                    <option value="ZeroAndOne">Convert to Zero/One (Opened/Closed)</option>
                </select>
                <p>Neurals round: </p>
                <select name="neu_round">
                    <option value="DontRound">Don't round</option>
                    <option value="Tanh">Tanh</option>
                    <option value="ZeroAndOne" selected>Convert to Zero/One (Opened/Closed)</option>
                </select>
                <p>Outputs round: </p>
                <select name="out_round">
                    <option value="DontRound">Don't round</option>
                    <option value="Tanh" selected>Tanh</option>
                    <option value="ZeroAndOne">Convert to Zero/One (Opened/Closed)</option>
                </select>
            </div>
            <center><input type="submit" /></center>
        </form>
        <br />
    </div>
    <button id="addElementButton" onclick="ShowViewNewElementToDB()">Add new element to database</button><br />
    <div class="learning_block">
        <h2>Learning</h2>
        <button id="PassOneGenerationBTN">Pass one generation</button>
        <p>Generations amount: </p><input type="number" value="10" min="1" id="gens_amount" /><br /><br />
        <button onclick="SeveralGenerationsPass()">Pass several generations</button>
    </div>
    <div id="AddElementToDatabase"></div>
    <div class="base_data">
        <h2>Base data</h2>
        <p id="BaseData"></p>
    </div>
</div>
<script type="text/javascript">
    // Hide form id generation exists
    fetch(`api/neuralnets/generationisnull`)
        .then(response => response.json())
        .then(data => {
            if (data.isnull == false) document.getElementById("CreateNNform").innerHTML = "";
        })
        .catch(error => {
            alert("Error has occured " + error);
        });
    // Passing several generations
    function SeveralGenerationsPass() {
        var num = document.getElementById("gens_amount").value;
        fetch(`api/neuralnets/passseveralgenerations`, { method: 'POST', headers: { 'Content-type': 'application/json' }, body: JSON.stringify(num) })
            .then(response => response.json())
            .then(data => { RefreshBaseData(data); })
            .catch(error => { alert(error); });
    }
    // Shows window with fields that user uses to adding new examples to learning database of neural net
    function ShowViewNewElementToDB() {
        fetch(`api/neuralnets/getaddingtodbview`)
            .then(response => response.text())
            .then(data => {
                document.getElementById("AddElementToDatabase").innerHTML = data;
                SetFormAddToDB();
            })
            .catch(error => {
                document.getElementById("AddElementToDatabase").innerHTML = `<p style='color: red;'>Error: ${error}</p>`;
                alert("Error: " + error);
            });
    }
    // Adds event listener to form, when it shows to user
    function SetFormAddToDB() {
        document.getElementById('myForm').addEventListener('submit', function (event) {
            event.preventDefault();
            var inputs = [];
            var outputs = [];
            var num = 0;
            while (document.getElementById(`input_${num}`) != undefined) {
                var value = document.getElementById(`input_${num}`).value;
                inputs.push(value);
                num++;
            }
            num = 0;
            while (document.getElementById(`output_${num}`) != undefined) {
                var value = document.getElementById(`output_${num}`).value;
                outputs.push(value);
                num++;
            }
            // sending request
            fetch(`api/neuralnets/addtodb`, {
                method: 'POST',
                headers: { 'Content-type': 'application/json' },
                body: JSON.stringify({ LearningInputs: inputs, ExpectedOutputs: outputs })
            })
                .then(response => response.text())
                .then(data => {
                    document.getElementById("AddingToDBresult").innerHTML = data;
                })
                .catch(error => { console.log(error); });
        });
    }
    document.getElementById("PassOneGenerationBTN").onclick = function () {
        fetch(`api/neuralnets/passgeneration`, { method: 'POST', headers: { 'Content-type': 'application/json' } })
            .then(response => response.json())
            .then(data => { RefreshBaseData(data); })
            .catch(error => { console.log(error); });
    }
    function FillByRandomNumbers() {
        var num = 0;
        while (document.getElementById(`input_${num}`) != undefined) {
            document.getElementById(`input_${num}`).value = randomNumber();
            num++;
        }
        num = 0;
        while (document.getElementById(`output_${num}`) != undefined) {
            document.getElementById(`output_${num}`).value = randomNumber();
            num++;
        }
    }
    function randomNumber() {
        return (Math.random() * 2) - 1;
    }
    function RefreshBaseData(data) {
        document.getElementById("BaseData").innerHTML = `Database size: ${data.databaseSize}<br>Generations passed: ${data.generationsPassed}<br>Current error: ${data.currentError}<br>Change error: ${data.changeError}`;
        console.log(data);
    }
</script>